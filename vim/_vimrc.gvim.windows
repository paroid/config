set nocompatible
filetype on
filetype plugin on
filetype indent on
syntax on
"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"some custom vim function
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Astyle : format code
func Astyle()
	if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
		exec "w"
		exec "!Astyle -A2 -p -xd -S -n -y --indent=spaces %"
		exec "e!"
	endif
endfunc

"Compile : C,C++,Java
func Compile()
	exec "w"
	"C
	if &filetype == 'c'
		exec "!gcc -Wl,-enable-auto-import % -g -o %<.exe"
		"C++
	elseif &filetype == 'cpp'
		exec "!g++ -Wl,-enable-auto-import % -g -o %<.exe"
		"Java
	elseif &filetype == 'java' 
		exec "!javac %" 
		"python
	elseif &filetype == 'python'
		exec "!python %"
	endif
endfunc

"Run C,C++,Java
func Run()
	if &filetype == 'c' || &filetype == 'cpp'
		exec "!%<.exe"
		"Java
	elseif &filetype == 'java' 
		exec "!java %<"
	endif
endfunc

"Debug C,C++,Java
func Debug()
	exec "w"
	"C
	if &filetype == 'c'
		exec "!gdb %<.exe"
		"C++
	elseif &filetype == 'cpp'
		exec "!gdb %<.exe"
		"Java
	elseif &filetype == 'java' 
		exec "!jdb %<"
	endif
endfunc

"Toggle Menu and Toolbar
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=l
set guioptions-=L
"menu bar toggle
nnoremap <silent> <F2> :if &guioptions =~# 'T' <Bar>
			\set guioptions-=T <Bar>
			\set guioptions-=m <bar>
			\else <Bar>
			\set guioptions+=T <Bar>
			\set guioptions+=m <Bar>
			\endif<CR>

function! NumberToggle()
	if(&relativenumber == 1)
		set norelativenumber
		set number
	else
		set relativenumber
	endif
endfunc

function! SetNumber()
	if &filetype != 'taglist' && &filetype != 'nerdtree'
		set norelativenumber
		set number
	endif
endfunc

function! SetRelativeNumber()
	if &filetype != 'taglist' && &filetype != 'nerdtree'
		:set relativenumber
	endif
endfunc

function! NoNumber()
	if &nu == 1
		set nonumber
	elseif &rnu == 1
		set norelativenumber
	endif
endfunc



"map function with short key
nnoremap <F3> :call Astyle()<CR>
nnoremap <F4> :call Compile()<CR>
nnoremap <F5> :call Run()<CR>
nnoremap <F6> :call Debug()<CR>


"General setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"language & encoding
let $LANG = 'en_US'
lang messages en_US,utf-8
set fileencodings=utf-8,gbk
set encoding=utf-8
set spell
"format
set ambiwidth=double
set smarttab
set expandtab
set softtabstop=4
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set backspace=2
set nowrap

"numbers
set number
"auto set number"
au FocusLost * call SetNumber()
au FocusGained * call SetRelativeNumber()
au InsertEnter * call SetNumber()
au InsertLeave * call SetRelativeNumber()
"no number for plug-in
au FileType taglist call NoNumber()
au FileType nerdtree call NoNumber()
"ctags
set tags=tags
set tags+=$VIM\stl_tags
nnoremap <leader>tu :TlistUpdate<CR>
set history=200
"Dir setting
set autochdir
set autoread
set wildmenu
set laststatus=2
set wildignore=*.o,*.obj,*.bak,*.exe
"search & match
set showmatch
set matchtime=8
set ignorecase
set incsearch
set hlsearch
set confirm
"color scheme & font
set t_Co=256
colorscheme molokai
set guifont=consolas:h11,YaHei
"window size
set columns=108
set lines=28
set sessionoptions+=resize
set foldenable
set foldmethod=indent
set foldlevel=100
set nobackup
set ruler
set scrolloff=3
set nojoinspaces
set updatetime=100

"Fold Code With Space
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

set backspace=eol,start,indent
" startup mercy information
"set shortmess=atI
set report=0
set noerrorbells

"tab setting
if has("gui_running")
	let mapleader = ','
	nmap <silent> <leader>tn :tabnew<CR>
	nmap <silent> <leader>tc :tabclose<CR>
endif
set tabpagemax=12

function ShortTabLabel ()
	let bufnrlist = tabpagebuflist (v:lnum)
	let label = bufname (bufnrlist[tabpagewinnr (v:lnum) -1])
	let filename = fnamemodify (label, ':t')
	return filename
endfunction

set guitablabel=%{ShortTabLabel()}

"status line
hi CurrentLine guibg=#424242
hi CursorLine guibg=#424242
au InsertEnter * hi CursorLine guibg=#122428
au InsertLeave * hi CursorLine guibg=#424242
au! Cursorhold * exe 'match CurrentLine /\%' . line('.') . 'l.*/'
au InsertEnter * hi User7 guibg=#616d29
au InsertLeave * hi User7 guibg=#313131
"colors
hi User1 guifg=#ae81ff guibg=#313131 
hi User2 guifg=#fd971f guibg=#212121
hi User3 guifg=#66d9ef guibg=#313131 
hi User4 guifg=#fd971f guibg=#040404 
hi User5 guifg=#eeee40 guibg=#313131 
hi User6 guifg=#e0e0e0 guibg=#040404 
hi User7 guifg=#d0d0d0 guibg=#313131

set statusline =
set statusline +=%1*[%n]%<\ 
set statusline +=%6*\ %f\ 
set statusline +=%2*%y%h%m%r
set statusline +=%6*\ %{&ff}\ \|\ %{(&fenc==\"\"?&enc:&fenc)}\ 
set statusline +=%7*\ %=
set statusline +=%3*\ [
set statusline +=%1*%b
set statusline +=%5*\ 0x%B
set statusline +=%3*]\ 
set statusline +=%4*\ %l
set statusline +=%6*\/\%L,
set statusline +=%4*%c%V\ 
set statusline +=%3*\ %P\ 

"set cursor to right position when open file
au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif

if has("gui_running")
	au InsertLeave * se nocul
	au InsertEnter * se cul
endif

"short mapping
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=','
inoremap jj <ESC>
nnoremap ; :
vnoremap ; :
snoremap ; :
nnoremap <silent> <leader>/ :noh<CR>
nnoremap <silent> <leader>w :update<CR>
noremap <C-S>	:update<CR>
vnoremap <C-S>	<C-C>:update<CR>
inoremap <C-S>	<C-O>:update<CR>
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>l :marks<CR>
nnoremap <silent> <leader>. :call NumberToggle()<CR>
nnoremap <silent> <leader>r :MRU<CR>
nnoremap <silent> <leader>c :Calendar<CR>
nnoremap <silent> <leader>z ``ggvG=``
"wrap & no warp
nnoremap <silent> <leader>wr :set wrap<CR>
nnoremap <silent> <leader>wR :set nowrap<CR>
"quick load _vimrc
nnoremap <silent> <leader>e :e $VIM\_vimrc <CR>
"Grep
nnoremap <silent> <F10> :Grep<CR>
"Auto Complete Bracket
inoremap ( ()<ESC>i
inoremap { {}<ESC>i
inoremap [ []<ESC>i
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap <C-tab> <C-x><C-n>
"remove the only join space
nnoremap J Jx
"Window switch 
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"split window
nnoremap <leader>s :vsp 
"resize width
nnoremap <leader>[ <C-w>12<
nnoremap <leader>] <C-w>12>
nnoremap <leader>{ <C-w>6-
nnoremap <leader>} <C-w>6+
"wrap line up down
nnoremap j gj
nnoremap k gk
nnoremap <A-j> j
nnoremap <A-k> k
"disable arrow key
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
"insert mode move
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-l> <right>
"visual indent
vnoremap > >gv
vnoremap < <gv
"g command
nnoremap <leader>del :g/^\s*$/d<CR>
nnoremap <leader>dl :g/^$/,/./-j<CR>
"fix windows mappings
noremap <C-i> <C-a>
"Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG
"system clipboard paste
inoremap <C-q> <esc>"+pa
nnoremap <C-q> "+p
"copy to system clipboard
noremap <C-c> "+y
"work base dir
nnoremap <leader>B :cd D:\A-Project\CC\Vim<CR>
cd d:\a-project\cC\Vim

"plug-in  setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"TagList option
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Show_One_File = 1
let Tlist_Ctags_Cmd = 'ctags'
let Tlist_Compart_Format = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_Enable_Fold_Column = 0
"let Tlist_Auto_Open = 1

"Pydiction
let g:pydiction_location = '$VIMRUNTIME\ftplugin\pydiction\complete-dict'
"Cscope
cs a $VIM\cscope.out
"css color
let g:cssColorVimDoNotMessMyUpdatetime = 1
"VimWiki
let g:vimwiki_camel_case = 0
let g:vimwiki_browsers=['E:\ChromePlus\chrome.exe']
let g:vimwiki_list = [{'path': 'D:\Wiki\vimwiki','path_html': 'D:\Wiki\public_html','auto_export': 0}]
let g:vimwiki_CJK_length = 1
let g:vimwiki_valid_html_tags='b,i,s,u,sub,sup,kbd,br,hr,div,del,code,span'
let s:vimwiki_defaults_diary_header = 'Diary'
nnoremap <S-F4> :Vimwiki2HTML<CR>
nnoremap <S-F5> :VimwikiAll2HTML<CR>
nnoremap <leader>wtt :VimwikiTable

"window manager
nnoremap <F7> :WMToggle<CR>
let g:AutoOpenWinManager = 1
let g:NERDTree_title="[NERD Tree]" 
let g:winManagerWindowLayout='NERDTree|TagList,BufExplorer'
function! NERDTree_Start()
	exec 'NERDTree'
endfunction

"NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeWinSize=24

function! NERDTree_IsValid()
	return 1
endfunction
"SuperTab
let g:SuperTabDefaultCompletionType = "context"
"fenceView
let g:fencview_autodetect = 1

