"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" _vimrc file for gvim
" author: paroid
" email:  paroid@paroid.org
" update: 2013-08-18
" Happy Vimming! 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype on
filetype plugin on
filetype indent on
syntax on
let mapleader=','
let g:baseDir = 'D:\Paroid\Project'
"some custom vim function
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"base Directory
function! CdBaseDir()
    exe "cd ".g:baseDir
endfunc
"Astyle : format code, need Astyle.exe
function! Astyle()
    if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
        :update
        exec "!Astyle -A2 -p -xd -S -n -y --indent=spaces %"
        exec "e!"
    endif
endfunc
"some compiler cmd
"need gcc/g++/java/python
function! Compile()
    :update
    if &filetype == 'c'
        exec "!gcc -Wl,-enable-auto-import % -g -o %<.exe"
    elseif &filetype == 'cpp'
        exec "!g++ -Wl,-enable-auto-import % -g -o %<.exe"
    elseif &filetype == 'java' 
        exec "!javac %" 
    elseif &filetype == 'python'
        exec "!python %"
    endif
endfunc

"Run
function! Run()
    if &filetype == 'c' || &filetype == 'cpp'
        exec "!%<.exe"
    elseif &filetype == 'java' 
        exec "!java %<"
    endif
endfunc

"Debug
function! Debug()
    if &filetype == 'c'
        exec "!gdb %<.exe"
    elseif &filetype == 'cpp'
        exec "!gdb %<.exe"
    elseif &filetype == 'java' 
        exec "!jdb %<"
    endif
endfunc

"Toggle Menu and Toolbar
function! ToggleMenuBar()
    if &guioptions =~# 'T' 
        set guioptions-=T 
        set guioptions-=m 
    else 
        set guioptions+=T
        set guioptions+=m
    endif
endfunc

function! TagListZoom()
    if &filetype == 'taglist'
        :res -11
        normal x
        :wincmd p
    else
        if &modified == 1
            :update
            :TlistUpdate
        endif
        :wincmd b
        if &filetype == 'taglist'
            :res
            normal x
        else
            :wincmd p
        endif
    endif
endfunc

function! NERDTreeZoom()
    if &filetype == 'nerdtree'
        :res 12
        normal A
        :wincmd p
    else
        :silent! NERDTreeFind
        :res
        normal A
    endif
endfunc


function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

function! SetNumber()
    if &filetype != 'taglist' && &filetype != 'nerdtree'
        set norelativenumber
        set number
    endif
endfunc

function! SetRelativeNumber()
    if &filetype != 'taglist' && &filetype != 'nerdtree'
        :set relativenumber
    endif
endfunc

function! NoNumber()
    if &nu == 1
        set nonumber
    elseif &rnu == 1
        set norelativenumber
    endif
endfunc

function! HasFoldedLine()
    let lnum = 1
    while lnum <= line("$")
        if foldclosed(lnum) != -1
            return 1
        endif
        let lnum += 1
    endwhile
    return 0
endfunc

"set cursor to right position when open file
function! RestoreCursorPos()
    if line("'\"") > 0 && line("'\"") <= line("$") 
        normal! g`" 
    endif
endfunc

function! FormatIndent()
    :normal gg=G
    ;normal ''
endfunc

"map function with short key
nnoremap <F1> :h 
inoremap <F1> <ESC>:h 
nnoremap <F2> :call ToggleMenuBar()<CR>
nnoremap <F3> :call Astyle()<CR>
nnoremap <F4> :call Compile()<CR>
nnoremap <F5> :call Run()<CR>
nnoremap <F6> :call Debug()<CR>
nnoremap <F7> :WMToggle<CR>
nnoremap <F10> :Grep<CR>


"General setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"language & encoding
let $LANG = 'en_US'
lang messages en_US,utf-8
set fileencodings=utf-8,gbk
set encoding=utf-8
set spell
"format
set ambiwidth=double
set smarttab
set expandtab
set softtabstop=4
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set backspace=2
set nowrap
"Fold Code With Space
nnoremap <silent> <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
nnoremap <silent> <S-space> @=(HasFoldedLine() ? 'zR' : 'zM')<CR>
"auto indent
au Bufwrite,FileReadPre *.cpp,*.c,*.java,*.py  call FormatIndent()
"local cd dir
au BufEnter * lcd %:p:h

"numbers
set number
"auto set number"
au FocusLost * call SetNumber()
au FocusGained * call SetRelativeNumber()
au InsertEnter * call SetNumber()
au InsertLeave * call SetRelativeNumber()
"no number for plug-in
au FileType taglist call NoNumber()
au FileType nerdtree call NoNumber()
"map <C-[> to <C-o> in help file"
au FileType help :nnoremap <buffer> <C-[> <C-o>
au FileType help :nnoremap <buffer> q :q<CR>

au BufReadPost * call RestoreCursorPos()
"ctags
set tags=tags
set tags+=$VIM\stl_tags
set history=200
"Dir setting
set autochdir
set autoread
set wildmenu
set laststatus=2
set wildignore=*.o,*.obj,*.bak,*.exe
"search & match
set showmatch
set matchtime=8
set ignorecase
set smartcase
set incsearch
set hlsearch
set confirm
"color scheme & font
set t_Co=256
colorscheme molokai
set guifont=consolas:h11,YaHei
"window size
set columns=108
set lines=28
set sessionoptions+=resize
set foldenable
set foldmethod=indent
set foldlevel=100
set nobackup
set ruler
set scrolloff=3
set nojoinspaces
set updatetime=500
set backspace=eol,start,indent
set report=0
set noerrorbells

"tab setting
set tabpagemax=12
if has("gui_running")
    let mapleader = ','
    nmap <leader>tn :tabnew<CR>
    nmap <leader>tc :tabclose<CR>
    "remove gui menubar
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    au InsertLeave * se nocul
    au InsertEnter * se cul
endif

function! ShortTabLabel ()
    let bufnrlist = tabpagebuflist (v:lnum)
    let label = bufname (bufnrlist[tabpagewinnr (v:lnum) -1])
    let filename = fnamemodify (label, ':t')
    return filename
endfunction

set guitablabel=%{ShortTabLabel()}

"status line
hi CurrentLine guibg=#424242
hi CursorLine guibg=#424242
au InsertEnter * hi CursorLine guibg=#122428
au InsertLeave * hi CursorLine guibg=#424242
au InsertEnter * hi CurrentLine guibg=#122428
au InsertLeave * hi CurrentLine guibg=#424242
"au! Cursorhold * exe 'match CurrentLine /\%' . line('.') . 'l.*/'
au InsertEnter * hi User7 guifg=#070707 guibg=#a3bd29
au InsertLeave * hi User7 guifg=#d0d0d0 guibg=#313131
"colors
hi User1 guifg=#ae81ff guibg=#313131 
hi User2 guifg=#fd971f guibg=#212121
hi User3 guifg=#66d9ef guibg=#313131 
hi User4 guifg=#fd971f guibg=#040404 
hi User5 guifg=#eeee40 guibg=#313131 
hi User6 guifg=#e0e0e0 guibg=#040404 
hi User7 guifg=#d0d0d0 guibg=#313131

set statusline =
set statusline +=%1*[%n]\ 
set statusline +=%6*\ %f\ %<
set statusline +=%2*%y%m%r
set statusline +=%6*\ %{&ff}\ \|\ %{(&fenc==\"\"?&enc:&fenc)}\ 
set statusline +=%7*%=%{strftime('%H:%M')}\ 
set statusline +=%3*\ [
set statusline +=%1*%b
set statusline +=%5*\ 0x%B
set statusline +=%3*]\ 
set statusline +=%4*\ %l
set statusline +=%6*\/\%L,
set statusline +=%4*%c%V\ 
set statusline +=%3*\ %P\ 

"short mapping
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
inoremap jk <ESC>
nnoremap ; :
vnoremap ; :
snoremap ; :
nnoremap <leader>/ :noh<CR>
nnoremap <leader>W :update !sudo tee %<CR>
nnoremap <leader>w :update<CR>
noremap <C-S>	:update<CR>
vnoremap <C-S>	<C-C>:update<CR>
inoremap <C-S>	<C-O>:update<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>l :marks<CR>
nnoremap <leader>. :call NumberToggle()<CR>
nnoremap R :MRU<CR>
nnoremap <leader>c :Calendar<CR>
nnoremap <leader>z :call FormatIndent()<CR>
"hex edit
nnoremap <leader>h :%!xxd<CR>
nnoremap <leader>H :%!xxd -r<CR>
"wrap & no warp
nnoremap <leader>wr :set wrap<CR>
nnoremap <leader>wR :set nowrap<CR>
"quick load _vimrc
nnoremap <leader>e :e $VIM\_vimrc <CR>
"Auto Complete Bracket
inoremap ( ()<ESC>i
inoremap { {}<ESC>i
inoremap [ []<ESC>i
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
"remove the only join space
nnoremap J Jx
"Window switch 
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"split window
nnoremap <leader>s :vsp 
nnoremap Z :call TagListZoom()<CR>
nnoremap <C-z> :call NERDTreeZoom()<CR>
"resize width
nnoremap <leader>[ <C-w>12<
nnoremap <leader>] <C-w>12>
nnoremap <leader>{ <C-w>6-
nnoremap <leader>} <C-w>6+
"wrap line up down
nnoremap j gj
nnoremap k gk
nnoremap <A-j> j
nnoremap <A-k> k
"disable arrow key
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
"insert mode move
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-l> <right>
inoremap jl <right>
inoremap jf <left>
"visual indent
vnoremap > >gv
vnoremap < <gv
"quick delete command
nnoremap <leader>del :g/^\s*$/d<CR>
nnoremap <leader>dl :g/^$/,/./-j<CR>
"inc
noremap <C-i> <C-a>
"Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG
"system clipboard paste
inoremap <C-q> <esc>"+pa
nnoremap <C-q> "+p
"copy to system clipboard
noremap <C-c> "+y
"filename completion
inoremap <A-f> <C-x><C-f>
"work base dir
nnoremap <leader>bb :call CdBaseDir()<CR>

"plug-in  setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"TagList option
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Show_One_File = 1
let Tlist_Ctags_Cmd = 'ctags'
let Tlist_Compart_Format = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_Enable_Fold_Column = 0
let Tlist_WinWidth = 24

"pydiction
let g:pydiction_location = '$VIMRUNTIME\ftplugin\pydiction\complete-dict'
"cscope
cs a $VIM\cscope.out
"css color
let g:cssColorVimDoNotMessMyUpdatetime = 1
"VimWiki
let g:vimwiki_camel_case = 0
let g:vimwiki_browsers=['E:\ChromePlus\chrome.exe']
let g:vimwiki_list = [{'path': 'D:\Wiki\vimwiki','path_html': 'D:\Wiki\public_html','auto_export': 0}]
let g:vimwiki_CJK_length = 1
let g:vimwiki_valid_html_tags='b,i,s,u,sub,sup,kbd,br,hr,div,del,code,span'
let s:vimwiki_defaults_diary_header = 'Diary'
nnoremap <S-F4> :Vimwiki2HTML<CR>
nnoremap <S-F5> :VimwikiAll2HTML<CR>
nnoremap <leader>wtt :VimwikiTable

"window manager
let g:AutoOpenWinManager = 1
let g:NERDTree_title="[NERD Tree]" 
let g:winManagerWindowLayout='NERDTree|TagList,BufExplorer'
function! NERDTree_Start()
    exec 'NERDTree'
endfunction

"NERDTree
let NERDTreeShowBookmarks = 1
let NERDTreeWinSize = 24
let NERDTreeChDirMode = 2
let NERDTreeAutoCenter = 1

function! NERDTree_IsValid()
    return 1
endfunction
"SuperTab
let g:SuperTabNoCompleteAfter = [',',';','\s']
"fenceView
let g:fencview_autodetect = 1

